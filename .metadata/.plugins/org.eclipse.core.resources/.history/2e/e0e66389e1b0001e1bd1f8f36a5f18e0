package com.myweb.www.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

//@RequiredArgsConstructor 선언후 
// private final로 객체 등록 => 생성자 주입 

@Slf4j
@RequestMapping("/board/*")
@RequiredArgsConstructor
@Controller
public class BoardController {

	private final BoardService bsv; 

	private final FileHandler fhd;
	
	@GetMapping("/register")
	public void register() {}
	/* nav에서의 단순링크용으로 사용되는 메소드 
    <li class="nav-item">
    	<a class="nav-link" href="/board/register">게시판 글쓰기</a>
    </li>
	*/
	
	// 밑의 register는 register.jsp에서의 활용을 위한 post메서드
	@PostMapping("/register")
	public String insert(BoardVO bvo, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>> bvo >>>> {}", bvo);
		List<FileVO> flist = null;
		
		// fileHandler 생성 multipartfile => flist
		if(files[0].getSize() > 0) {
			flist = fhd.uploadFiles(files);
			log.info(">>>>>>>>flist>> {}",flist);
		} else {
			log.info("file null");
		}
		
		BoardDTO bdto = new BoardDTO(bvo, flist);
				
		//int isOk = bsv.insert(bvo);
		int isOk = bsv.insert(bdto);
		log.info(">>> board register >>> "+(isOk>0?"OK":"Fail"));
		// 목적지 경로
		return "index";
		
	}
	@GetMapping("/list")
	  //public void list(Model m) {
		public void list(Model m, PagingVO pgvo) {
		log.info(">>>> pagingVO >> {}",pgvo);
		
		// 페이징 처리
		//List<BoardVO> list = bsv.getList();
		List<BoardVO> list = bsv.getList(pgvo);
		
		// totalCount구하기
		int totalCount = bsv.getTotalCount(pgvo);
		// ph 객체 생성 (pgvo, totalCount)
		PagingHandler ph = new PagingHandler(pgvo,totalCount);
		
		m.addAttribute("list", list);	
		//m.addAttribute("list", bsv.getList()); 로 써도 상관없긴 하지만 더불어 윗줄의 내용이 의미 없어진다
		m.addAttribute("ph", ph);	
	}
	
	@GetMapping({"/detail", "/modify"})	
	public void detail(Model m, @RequestParam("bno") long bno) {
		log.info(">>>> bno >>"+bno);
		m.addAttribute("bdto", bsv.getDetail(bno));
	}
	
	// detail과 modify의 중복 선언되는 이유는 modify가 Getmapping과 Postmapping 중복선언해야되서
	// detail과 같이 선언됨
	@PostMapping("/modify")
//	public String modify(BoardVO bvo) {
	public String modify(BoardVO bvo, @RequestParam(name = "files", required =false)MultipartFile[]files) {
		log.info(">>> bvo >>> {}"+bvo);
		
		List<FileVO> flist = null;
		if(files[0].getSize()>0) {
			flist = fhd.uploadFiles(files);
			log.info(">>>>>>>>flist>> {}",flist);
		} else {
			log.info("file null");
		}
		
		BoardDTO bdto = new BoardDTO(bvo, flist); 
		
		// update 
		//int isOk = bsv.insert(bvo);
		int isOk = bsv.modify(bdto);
		log.info("modify is "+ ((isOk>0)? "OK": "Fail"));
		return "redirect:/board/list";
	}
		
	@GetMapping("/remove")
	public String delete(Model m, @RequestParam("bno") long bno) {
		log.info(">>> bno >> {}" +bno);
		int isOk = bsv.delete(bno);
		
		return "redirect:/board/list";
	}
	// string 과 void의 차이 : 
	//string의 경우 해당 jsp이 존재x=> 반환(return)x 
	//void의 경우 해당 jsp가 존재/반환 가능?
	
	@DeleteMapping(value="/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFIle(@PathVariable("uuid") String uuid){
														// 앞의 value=""내부의 값과 동일
		log.info(">>>> cvo >> {} ", uuid);
		int isOk = bsv.removeFile(uuid);
		
		return (isOk > 0 ) ? new ResponseEntity<String>("1",HttpStatus.OK):
			new ResponseEntity<String>("0",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
}
	 
	
















